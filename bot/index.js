require("dotenv").config();
const { Telegraf, Scenes, session, Markup } = require("telegraf");

const deptSupermarket = require("./handlers/dept_supermarket");
const deptPharma = require("./handlers/dept_pharma");

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞—ë–º stage –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ü–µ–Ω—ã
const stage = new Scenes.Stage([deptSupermarket, deptPharma]);

bot.use(session());
bot.use(stage.middleware());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä–æ–ª–µ–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É)
const PASSWORD  = process.env.BOT_LOGIN_KEY;

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
bot.start((ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:");
    ctx.session.authenticated = false;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx, next) => {
    if (!ctx.session.authenticated) {
        if (ctx.message.text === PASSWORD) {
            ctx.session.authenticated = true;
            return ctx.reply(
                "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:",
                Markup.inlineKeyboard([
                    [Markup.button.callback("üè¨ –ú–∞–≥–∞–∑–∏–Ω—ã", "dept_supermarket")],
                    [Markup.button.callback("üíä –ê–ø—Ç–µ–∫–∏", "dept_pharma")]
                ])
            );
        } else {
            return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:");
        }
    }
    return next();
});

// –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
bot.action("dept_supermarket", (ctx) => {
    ctx.deleteMessage(); // —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    ctx.scene.enter("dept_supermarket");
});

bot.action("dept_pharma", (ctx) => {
    ctx.deleteMessage(); // —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    ctx.scene.enter("dept_pharma");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try {
    bot.launch(() => {
        console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    });
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
process.once("SIGINT", () => {
    console.log("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT)");
    bot.stop("SIGINT");
});
process.once("SIGTERM", () => {
    console.log("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)");
    bot.stop("SIGTERM");
});
